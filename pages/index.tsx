import { useState } from "react";
import Head from "next/head";
import styled from "styled-components";
import { useRouter } from "next/router";

//////
import { TopNav } from "../components/TopNav";

import { InputComponent } from "../components/SearchBar";
import { ButtonComponent } from "../components/Button";
import { RotatedHeading } from "../components/HeadingRotatedText";
import { RecentSearchComponent } from "../components/RecentSearchItem";
import { Spacer } from "../components/Spacer";
import {
  PageWrapper,
  ContentGrid,
  Row,
  AlignPage,
} from "../components/defaults";

import { isAddress } from "../functions/AddressValidate";

const Landing = styled.img`
  width: 980px;
  height: 375px;
  border-radius: 20px;
  position: absolute;
  top: 100px;
`;

export default function Home(): JSX.Element {
  const [ethAddress, setEthAddress]: [
    string | undefined,
    (host: string) => string | void
  ] = useState("");

  const onEthAddressHandler = (event: React.ChangeEvent<HTMLInputElement>) => {
    setEthAddress(event.target.value);
  };

  const router = useRouter();

  const sendToGallery = async () => {
    if (isAddress(ethAddress)) {
      router.push(`/gallery/${ethAddress}`);
    } else console.log("Not valid address");
  };

  return (
    <PageWrapper>
      <Head>
        <title>Clekta</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AlignPage>
        <TopNav />
        <Landing src={"/content/landing_image.png"} />
        <Spacer spacer={"45px"} />
        <InputComponent
          onChange={onEthAddressHandler}
          value={ethAddress}
          placeholder="0x"
        />
        <ButtonComponent onClick={() => sendToGallery()}>
          Gallery
        </ButtonComponent>
        <Spacer spacer={"100px"} />
        <Row>
          <RotatedHeading>Recent Searches</RotatedHeading>
          <ContentGrid>
            <RecentSearchComponent>
              0x38eae11284842ad78Ad87AaC894c70D180A8DD38
            </RecentSearchComponent>
            <RecentSearchComponent>
              0x38eae11284842ad78Ad87AaC894c70D180A8DD38
            </RecentSearchComponent>
            <RecentSearchComponent>
              0x38eae11284842ad78Ad87AaC894c70D180A8DD38
            </RecentSearchComponent>
            <RecentSearchComponent>
              0x38eae11284842ad78Ad87AaC894c70D180A8DD38
            </RecentSearchComponent>
            <RecentSearchComponent>
              0x38eae11284842ad78Ad87AaC894c70D180A8DD38
            </RecentSearchComponent>
            <RecentSearchComponent>
              0x38eae11284842ad78Ad87AaC894c70D180A8DD38
            </RecentSearchComponent>
          </ContentGrid>
        </Row>
      </AlignPage>
    </PageWrapper>
  );
}
